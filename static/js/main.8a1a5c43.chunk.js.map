{"version":3,"sources":["store/timer/reducers.js","config/config.js","store/timer/epics.js","store/reducers.js","store/epics.js","store/store.js","styles/theme.js","components/App/styles.js","components/App/app.js","components/Main/main.js","utils/utils.js","components/Timer/props.js","store/timer/selectors.js","components/Timer/timer.js","components/TimerButton/props.js","components/TimerButton/timer-button.js","components/PlayerCards/props.js","components/PlayerCards/player-cards.js","serviceWorker.js","index.js"],"names":["initialState","done","paused","remainingTime","activePlayer","playerStats","map","player","name","played","reducers","changePlayer","state","payload","subtractTime","addPlaytime","activePlayerStats","find","stat","toggleTimer","setDone","resetTimer","timerSlice","createSlice","timerReducer","reducer","actions","combineEpics","action$","state$","interval$","interval","pipe","mapTo","value","timer","ofType","scan","switchMap","empty","remaining","i","takeWhile","mergeMapTo","endWith","repeat","rootReducer","combineReducers","timerEpic","epicMiddleware","createEpicMiddleware","defaultMiddleware","getDefaultMiddleware","thunk","store","configureStore","middleware","run","rootEpic","theme","flow","createMuiTheme","responsiveFontSizes","useStyles","makeStyles","height","margin","userSelect","App","CssBaseline","ThemeProvider","memo","Box","py","display","alignItems","flexDirection","clone","Container","maxWidth","formattedTime","timeSegment","String","padStart","minutes","seconds","msec","formatTime","ms","sec","Math","floor","composeSelectors","selectors","mapValues","selector","mapStateToProps","connectProps","connect","Typography","align","variant","mapDispatchToProps","handleClick","useCallback","mt","justifyContent","width","Button","size","color","onClick","PlayerCard","Grid","item","px","style","cursor","border","Paper","gutterBottom","justify","container","spacing","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8a1a5c43.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { STARTING_TIME, SPEED, PLAYERS } from 'config';\r\n\r\nconst initialState = {\r\n  done: false,\r\n  paused: true,\r\n  remainingTime: STARTING_TIME,\r\n  activePlayer: null,\r\n  playerStats: PLAYERS.map(player => ({\r\n    name: player,\r\n    played: 0,\r\n  })),\r\n};\r\n\r\nconst reducers = {\r\n  changePlayer: (state, { payload }) => {\r\n    if (state.activePlayer !== payload) {\r\n      state.activePlayer = payload;\r\n    } else {\r\n      state.activePlayer = null;\r\n    }\r\n  },\r\n  subtractTime: state => {\r\n    state.remainingTime -= SPEED;\r\n  },\r\n  addPlaytime: state => {\r\n    const activePlayerStats = state.playerStats.find(\r\n      stat => stat.name === state.activePlayer,\r\n    );\r\n    if (activePlayerStats) activePlayerStats.played += SPEED;\r\n  },\r\n  toggleTimer: state => {\r\n    state.paused = !state.paused;\r\n  },\r\n  setDone: state => {\r\n    state.done = true;\r\n  },\r\n  resetTimer: () => {\r\n    return initialState;\r\n  },\r\n};\r\n\r\nconst timerSlice = createSlice({\r\n  name: 'timer',\r\n  reducers,\r\n  initialState,\r\n});\r\n\r\nexport const { reducer: timerReducer } = timerSlice;\r\n\r\nexport const {\r\n  addPlaytime,\r\n  changePlayer,\r\n  subtractTime,\r\n  toggleTimer,\r\n  setDone,\r\n  resetTimer,\r\n} = timerSlice.actions;\r\n","const STARTING_TIME = 1 * 10 * 1000;\r\nconst SPEED = 20;\r\nconst PLAYERS = ['Dog', 'Cat', 'Bird'];\r\n\r\nexport { STARTING_TIME, SPEED, PLAYERS };\r\n","import { interval, empty } from 'rxjs';\r\n\r\nimport {\r\n  mapTo,\r\n  scan,\r\n  switchMap,\r\n  takeWhile,\r\n  mergeMapTo,\r\n  endWith,\r\n  repeat,\r\n} from 'rxjs/operators';\r\n\r\nimport { combineEpics, ofType } from 'redux-observable';\r\nimport { SPEED } from 'config';\r\nimport { subtractTime, addPlaytime, toggleTimer, setDone } from 'store/timer';\r\n\r\nconst timerEpic = (action$, state$) => {\r\n  const interval$ = interval(SPEED).pipe(mapTo(SPEED));\r\n  const remainingTime = state$.value.timer.remainingTime;\r\n  const paused = state$.value.timer.paused;\r\n\r\n  return action$.pipe(\r\n    ofType(toggleTimer),\r\n    scan(paused => !paused, paused),\r\n    switchMap(paused => (paused ? empty() : interval$)),\r\n    scan((remaining, i) => remaining - i, remainingTime),\r\n    takeWhile(remaining => remaining >= 0),\r\n    mergeMapTo([subtractTime(), addPlaytime()]),\r\n    endWith(setDone()),\r\n    repeat(),\r\n  );\r\n};\r\n\r\nexport default combineEpics(timerEpic);\r\n","import { combineReducers } from 'redux';\r\nimport { timerReducer } from './timer';\r\n\r\nconst rootReducer = combineReducers({\r\n  timer: timerReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { combineEpics } from 'redux-observable';\r\nimport { timerEpic } from './timer';\r\n\r\nexport default combineEpics(timerEpic);\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport rootReducer from './reducers';\r\nimport rootEpic from './epics';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\nconst defaultMiddleware = getDefaultMiddleware({ thunk: false });\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [epicMiddleware, ...defaultMiddleware],\r\n});\r\n\r\nepicMiddleware.run(rootEpic);\r\n\r\nexport default store;\r\n","import { createMuiTheme, responsiveFontSizes } from '@material-ui/core';\r\nimport { flow } from 'lodash/fp';\r\n\r\nconst theme = flow(\r\n  createMuiTheme,\r\n  responsiveFontSizes,\r\n)({\r\n  // Theming may be added in the future\r\n});\r\n\r\nexport default theme;\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  '@global': {\r\n    [['html', 'body', '#root']]: {\r\n      height: '100%',\r\n    },\r\n    body: {\r\n      margin: 0,\r\n    },\r\n    ':root': {\r\n      userSelect: 'none',\r\n    },\r\n  },\r\n});\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\r\nimport { Main } from 'components';\r\nimport { store } from 'store';\r\nimport { theme } from 'styles';\r\nimport useStyles from './styles';\r\n\r\nconst App = () => {\r\n  useStyles();\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <CssBaseline>\r\n        <ThemeProvider theme={theme}>\r\n          <Main />\r\n        </ThemeProvider>\r\n      </CssBaseline>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React, { memo } from 'react';\r\nimport { Container, Box } from '@material-ui/core';\r\nimport { PlayerCards, Timer, TimerButton } from 'components';\r\n\r\nconst Main = () => (\r\n  <Box py={4} display={'flex'} alignItems={'center'} flexDirection={'column'} clone>\r\n    <Container maxWidth={'md'}>\r\n      <div>\r\n        <Timer />\r\n        <TimerButton />\r\n      </div>\r\n      <PlayerCards />\r\n    </Container>\r\n  </Box>\r\n);\r\n\r\nexport default memo(Main);\r\n","import { flow, map, mapValues } from 'lodash/fp';\r\n\r\nconst padZeroes = timeSegment => String(timeSegment).padStart(2, '0');\r\nconst concatTime = ([minutes, seconds, msec]) => `${minutes}:${seconds}.${msec}`;\r\nconst formattedTime = flow(map(padZeroes), concatTime);\r\n\r\nconst formatTime = ms => {\r\n  const msec = (ms % 1000) / 10;\r\n  const sec = Math.floor(ms / 1000);\r\n  const seconds = sec % 60;\r\n  const minutes = Math.floor(sec / 60);\r\n\r\n  return formattedTime([minutes, seconds, msec]);\r\n};\r\n\r\nconst composeSelectors = selectors => state =>\r\n  mapValues(selector => selector(state), selectors);\r\n\r\nexport { formatTime, composeSelectors };\r\n","import { connect } from 'react-redux';\r\nimport { composeSelectors } from 'utils';\r\nimport { remainingTime } from 'store/timer/selectors';\r\n\r\nconst mapStateToProps = composeSelectors({\r\n  remainingTime,\r\n});\r\n\r\nexport default connect(mapStateToProps);\r\n","const remainingTime = ({ timer: { remainingTime } }) => remainingTime;\r\nconst activePlayer = ({ timer: { activePlayer } }) => activePlayer;\r\nconst playerStats = ({ timer: { playerStats } }) => playerStats;\r\nconst paused = ({ timer: { paused } }) => paused;\r\nconst done = ({ timer: { done } }) => done;\r\n\r\nexport { remainingTime, activePlayer, playerStats, paused, done };\r\n","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { formatTime } from 'utils';\r\nimport connectProps from './props';\r\n\r\nconst Timer = ({ remainingTime }) => (\r\n  <Typography align={'center'} variant={'h1'}>\r\n    {formatTime(remainingTime)}\r\n  </Typography>\r\n);\r\n\r\nexport default connectProps(Timer);\r\n","import { connect } from 'react-redux';\r\nimport { toggleTimer, resetTimer } from 'store/timer';\r\nimport { composeSelectors } from 'utils';\r\nimport { paused, done } from 'store/timer/selectors';\r\n\r\nconst mapStateToProps = composeSelectors({\r\n  paused,\r\n  done,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  toggleTimer,\r\n  resetTimer,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps);\r\n","import React, { useCallback } from 'react';\r\nimport { Box, Button } from '@material-ui/core';\r\nimport connectProps from './props';\r\n\r\nconst TimerButton = ({ paused, done, toggleTimer, resetTimer }) => {\r\n  const handleClick = useCallback(() => {\r\n    done ? resetTimer() : toggleTimer();\r\n  }, [done, toggleTimer, resetTimer]);\r\n\r\n  return (\r\n    <Box mt={2} display={'flex'} justifyContent={'center'}>\r\n      <Box width={1} clone>\r\n        <Button\r\n          variant={'contained'}\r\n          size={'large'}\r\n          color={'primary'}\r\n          onClick={handleClick}\r\n        >\r\n          {done ? 'Reset' : paused ? 'Start' : 'Stop'}\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default connectProps(TimerButton);\r\n","import { connect } from 'react-redux';\r\nimport { changePlayer } from 'store/timer';\r\nimport { composeSelectors } from 'utils';\r\nimport { activePlayer, playerStats } from 'store/timer/selectors';\r\n\r\nconst mapStateToProps = composeSelectors({\r\n  activePlayer,\r\n  playerStats,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  changePlayer,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps);\r\n","import React, { useCallback } from 'react';\r\nimport { Box, Typography, Paper, Grid } from '@material-ui/core';\r\nimport { formatTime } from 'utils';\r\nimport connectProps from './props';\r\n\r\nconst PlayerCard = ({ stat, activePlayer, changePlayer }) => {\r\n  const handleClick = useCallback(() => {\r\n    changePlayer(stat.name);\r\n  }, [changePlayer, stat]);\r\n\r\n  return (\r\n    <Grid item>\r\n      <Box\r\n        px={4}\r\n        py={2}\r\n        style={{ cursor: 'pointer' }}\r\n        border={\r\n          activePlayer === stat.name ? '2px solid #3f51b5' : '2px solid transparent'\r\n        }\r\n        clone\r\n      >\r\n        <Paper onClick={handleClick}>\r\n          <Typography variant={'h3'} gutterBottom>\r\n            {stat.name}\r\n          </Typography>\r\n          <Typography variant={'h4'}>{formatTime(stat.played)}</Typography>\r\n        </Paper>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst PlayerCards = ({ activePlayer, playerStats, changePlayer }) => (\r\n  <Box mt={4}>\r\n    <Grid justify={'center'} container spacing={4}>\r\n      {playerStats.map(stat => (\r\n        <PlayerCard\r\n          key={stat.name}\r\n          stat={stat}\r\n          activePlayer={activePlayer}\r\n          changePlayer={changePlayer}\r\n        />\r\n      ))}\r\n    </Grid>\r\n  </Box>\r\n);\r\n\r\nexport default connectProps(PlayerCards);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { App } from 'components';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}