{"version":3,"sources":["utils.js","store/timer/reducers.js","config.js","store/timer/epics.js","store/timer/selectors.js","containers/Main/props.js","containers/Main/main.js","store/reducers.js","store/epics.js","store/store.js","styles/theme.js","components/App/styles.js","components/App/app.js","components/Timer/timer.js","components/TimerButton/timer-button.js","components/PlayerCards/player-cards.js","serviceWorker.js","index.js"],"names":["selectors","initialState","paused","remainingTime","activePlayer","playerStats","map","player","name","played","reducers","changePlayer","state","payload","subtractTime","addPlaytime","activePlayerStats","find","stat","toggleTimer","timerSlice","createSlice","timerReducer","reducer","actions","combineEpics","action$","state$","interval$","interval","pipe","mapTo","value","timer","ofType","scan","switchMap","empty","remaining","i","takeWhile","mergeMapTo","formattedTime","flow","timeSegment","String","padStart","minutes","seconds","msec","formatTime","ms","sec","Math","floor","buttonText","createSelector","mapStateToProps","mapValues","selector","mapDispatchToProps","connect","connectProps","Box","py","display","alignItems","flexDirection","clone","Container","maxWidth","rootReducer","combineReducers","timerEpic","epicMiddleware","createEpicMiddleware","defaultMiddleware","getDefaultMiddleware","thunk","store","configureStore","middleware","run","rootEpic","theme","createMuiTheme","responsiveFontSizes","useStyles","makeStyles","height","margin","userSelect","App","CssBaseline","ThemeProvider","Timer","Typography","align","variant","TimerButton","handleClick","useCallback","mt","justifyContent","width","Button","size","color","onClick","PlayerCard","Grid","item","px","style","cursor","border","Paper","gutterBottom","PlayerCards","justify","container","spacing","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.584c6b66.chunk.js","sourcesContent":["import { flow, map, mapValues } from 'lodash/fp';\r\n\r\nconst padZeroes = timeSegment => String(timeSegment).padStart(2, '0');\r\nconst concatTime = ([minutes, seconds, msec]) => `${minutes}:${seconds}.${msec}`;\r\nconst formattedTime = flow(map(padZeroes), concatTime);\r\n\r\nconst formatTime = ms => {\r\n  const msec = (ms % 1000) / 10;\r\n  const sec = Math.floor(ms / 1000);\r\n  const seconds = sec % 60;\r\n  const minutes = Math.floor(sec / 60);\r\n\r\n  return formattedTime([minutes, seconds, msec]);\r\n};\r\n\r\nconst composeSelectors = selectors => state =>\r\n  mapValues(selector => selector(state), selectors);\r\n\r\nexport { formatTime, composeSelectors };\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { STARTING_TIME, SPEED, PLAYERS } from 'config';\r\n\r\nconst initialState = {\r\n  paused: true,\r\n  remainingTime: STARTING_TIME,\r\n  activePlayer: null,\r\n  playerStats: PLAYERS.map(player => ({\r\n    name: player,\r\n    played: 0,\r\n  })),\r\n};\r\n\r\nconst reducers = {\r\n  changePlayer: (state, { payload }) => {\r\n    if (state.activePlayer !== payload) {\r\n      state.activePlayer = payload;\r\n    } else {\r\n      state.activePlayer = null;\r\n    }\r\n  },\r\n  subtractTime: state => {\r\n    state.remainingTime -= SPEED;\r\n  },\r\n  addPlaytime: state => {\r\n    const activePlayerStats = state.playerStats.find(\r\n      stat => stat.name === state.activePlayer,\r\n    );\r\n    if (activePlayerStats) activePlayerStats.played += SPEED;\r\n  },\r\n  toggleTimer: state => {\r\n    state.paused = !state.paused;\r\n  },\r\n};\r\n\r\nconst timerSlice = createSlice({\r\n  name: 'timer',\r\n  reducers,\r\n  initialState,\r\n});\r\n\r\nexport const { reducer: timerReducer } = timerSlice;\r\n\r\nexport const {\r\n  addPlaytime,\r\n  changePlayer,\r\n  subtractTime,\r\n  toggleTimer,\r\n} = timerSlice.actions;\r\n","const STARTING_TIME = 1 * 10 * 1000;\r\nconst SPEED = 20;\r\nconst PLAYERS = ['Dog', 'Cat', 'Bird'];\r\n\r\nexport { STARTING_TIME, SPEED, PLAYERS };\r\n","import { interval, empty } from 'rxjs';\r\nimport { mapTo, scan, switchMap, takeWhile, mergeMapTo } from 'rxjs/operators';\r\nimport { combineEpics, ofType } from 'redux-observable';\r\nimport { SPEED } from 'config';\r\nimport { subtractTime, addPlaytime, toggleTimer } from 'store/timer';\r\n\r\nconst timerEpic = (action$, state$) => {\r\n  const interval$ = interval(SPEED).pipe(mapTo(SPEED));\r\n  const remainingTime = state$.value.timer.remainingTime;\r\n  const paused = state$.value.timer.paused;\r\n\r\n  return action$.pipe(\r\n    ofType(toggleTimer),\r\n    scan(paused => !paused, paused),\r\n    switchMap(paused => (paused ? empty() : interval$)),\r\n    scan((remaining, i) => remaining - i, remainingTime),\r\n    takeWhile(remaining => remaining >= 0),\r\n    mergeMapTo([subtractTime(), addPlaytime()]),\r\n  );\r\n};\r\n\r\nexport default combineEpics(timerEpic);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst remainingTime = ({ timer: { remainingTime } }) => remainingTime;\r\nconst activePlayer = ({ timer: { activePlayer } }) => activePlayer;\r\nconst playerStats = ({ timer: { playerStats } }) => playerStats;\r\n\r\nconst buttonText = createSelector(\r\n  ({ timer: { paused } }) => paused,\r\n  paused => (paused ? 'Start' : 'Stop'),\r\n);\r\n\r\nexport { remainingTime, activePlayer, playerStats, buttonText };\r\n","import { connect } from 'react-redux';\r\nimport { changePlayer, toggleTimer } from 'store/timer';\r\nimport { composeSelectors } from 'utils';\r\nimport {\r\n  remainingTime,\r\n  activePlayer,\r\n  playerStats,\r\n  buttonText,\r\n} from 'store/timer/selectors';\r\n\r\nconst mapStateToProps = composeSelectors({\r\n  remainingTime,\r\n  activePlayer,\r\n  playerStats,\r\n  buttonText,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  changePlayer,\r\n  toggleTimer,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps);\r\n","import React from 'react';\r\nimport connectProps from './props';\r\nimport { Container, Box } from '@material-ui/core';\r\nimport { PlayerCards, Timer, TimerButton } from 'components';\r\n\r\nconst Main = ({\r\n  remainingTime,\r\n  activePlayer,\r\n  playerStats,\r\n  buttonText,\r\n  changePlayer,\r\n  toggleTimer,\r\n}) => (\r\n  <Box py={4} display={'flex'} alignItems={'center'} flexDirection={'column'} clone>\r\n    <Container maxWidth={'md'}>\r\n      <div>\r\n        <Timer remainingTime={remainingTime} />\r\n        <TimerButton toggleTimer={toggleTimer} buttonText={buttonText} />\r\n      </div>\r\n      <PlayerCards\r\n        activePlayer={activePlayer}\r\n        changePlayer={changePlayer}\r\n        playerStats={playerStats}\r\n      />\r\n    </Container>\r\n  </Box>\r\n);\r\n\r\nexport default connectProps(Main);\r\n","import { combineReducers } from 'redux';\r\nimport { timerReducer } from './timer';\r\n\r\nconst rootReducer = combineReducers({\r\n  timer: timerReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { combineEpics } from 'redux-observable';\r\nimport { timerEpic } from './timer';\r\n\r\nexport default combineEpics(timerEpic);\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport rootReducer from './reducers';\r\nimport rootEpic from './epics';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\nconst defaultMiddleware = getDefaultMiddleware({ thunk: false });\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [epicMiddleware, ...defaultMiddleware],\r\n});\r\n\r\nepicMiddleware.run(rootEpic);\r\n\r\nexport default store;\r\n","import { createMuiTheme, responsiveFontSizes } from '@material-ui/core';\r\nimport { flow } from 'lodash/fp';\r\n\r\nconst theme = flow(\r\n  createMuiTheme,\r\n  responsiveFontSizes,\r\n)({\r\n  // Theming may be added in the future\r\n});\r\n\r\nexport default theme;\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  '@global': {\r\n    [['html', 'body', '#root']]: {\r\n      height: '100%',\r\n    },\r\n    body: {\r\n      margin: 0,\r\n    },\r\n    ':root': {\r\n      userSelect: 'none',\r\n    },\r\n  },\r\n});\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\r\nimport { Main } from 'containers';\r\nimport { store } from 'store';\r\nimport { theme } from 'styles';\r\nimport useStyles from './styles';\r\n\r\nconst App = () => {\r\n  useStyles();\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <CssBaseline>\r\n        <ThemeProvider theme={theme}>\r\n          <Main />\r\n        </ThemeProvider>\r\n      </CssBaseline>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { formatTime } from 'utils';\r\n\r\nconst Timer = ({ remainingTime }) => (\r\n  <Typography align={'center'} variant={'h1'}>\r\n    {formatTime(remainingTime)}\r\n  </Typography>\r\n);\r\n\r\nexport default Timer;\r\n","import React, { useCallback } from 'react';\r\nimport { Box, Button } from '@material-ui/core';\r\n\r\nconst TimerButton = ({ toggleTimer, buttonText }) => {\r\n  const handleClick = useCallback(() => {\r\n    toggleTimer();\r\n  }, [toggleTimer]);\r\n\r\n  return (\r\n    <Box mt={2} display={'flex'} justifyContent={'center'}>\r\n      <Box width={1} clone>\r\n        <Button\r\n          variant={'contained'}\r\n          size={'large'}\r\n          color={'primary'}\r\n          onClick={handleClick}\r\n        >\r\n          {buttonText}\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TimerButton;\r\n","import React, { useCallback } from 'react';\r\nimport { Box, Typography, Paper, Grid } from '@material-ui/core';\r\nimport { formatTime } from 'utils';\r\n\r\nconst PlayerCard = ({ stat, activePlayer, changePlayer }) => {\r\n  const handleClick = useCallback(() => {\r\n    changePlayer(stat.name);\r\n  }, [changePlayer, stat]);\r\n\r\n  return (\r\n    <Grid item>\r\n      <Box\r\n        px={4}\r\n        py={2}\r\n        style={{ cursor: 'pointer' }}\r\n        border={\r\n          activePlayer === stat.name ? '2px solid #3f51b5' : '2px solid transparent'\r\n        }\r\n        clone\r\n      >\r\n        <Paper onClick={handleClick}>\r\n          <Typography variant={'h3'} gutterBottom>\r\n            {stat.name}\r\n          </Typography>\r\n          <Typography variant={'h4'}>{formatTime(stat.played)}</Typography>\r\n        </Paper>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst PlayerCards = ({ activePlayer, playerStats, changePlayer }) => (\r\n  <Box mt={4}>\r\n    <Grid justify={'center'} container spacing={4}>\r\n      {playerStats.map(stat => (\r\n        <PlayerCard\r\n          key={stat.name}\r\n          stat={stat}\r\n          activePlayer={activePlayer}\r\n          changePlayer={changePlayer}\r\n        />\r\n      ))}\r\n    </Grid>\r\n  </Box>\r\n);\r\n\r\nexport default PlayerCards;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { App } from 'components';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}